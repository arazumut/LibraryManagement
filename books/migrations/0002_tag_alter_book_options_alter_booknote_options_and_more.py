# Generated by Django 5.2.3 on 2025-06-20 13:03

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('books', '0001_initial'),
        ('libraries', '0002_alter_library_options_alter_library_address_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Etiket Adı')),
                ('slug', models.SlugField(unique=True, verbose_name='Slug')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Oluşturulma Tarihi')),
            ],
            options={
                'verbose_name': 'Etiket',
                'verbose_name_plural': 'Etiketler',
                'ordering': ['name'],
            },
        ),
        migrations.AlterModelOptions(
            name='book',
            options={'ordering': ['title', 'author'], 'verbose_name': 'Kitap', 'verbose_name_plural': 'Kitaplar'},
        ),
        migrations.AlterModelOptions(
            name='booknote',
            options={'ordering': ['-updated_at'], 'verbose_name': 'Kitap Notu', 'verbose_name_plural': 'Kitap Notları'},
        ),
        migrations.AlterModelOptions(
            name='bookrequest',
            options={'ordering': ['-requested_at'], 'verbose_name': 'Kitap İsteği', 'verbose_name_plural': 'Kitap İstekleri'},
        ),
        migrations.AlterField(
            model_name='book',
            name='author',
            field=models.CharField(max_length=255, verbose_name='Yazar'),
        ),
        migrations.AlterField(
            model_name='book',
            name='cover_image',
            field=models.ImageField(blank=True, null=True, upload_to='book_covers/', verbose_name='Kapak Resmi'),
        ),
        migrations.AlterField(
            model_name='book',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, verbose_name='Oluşturulma Tarihi'),
        ),
        migrations.AlterField(
            model_name='book',
            name='description',
            field=models.TextField(blank=True, null=True, verbose_name='Açıklama'),
        ),
        migrations.AlterField(
            model_name='book',
            name='language',
            field=models.CharField(blank=True, max_length=50, null=True, verbose_name='Dil'),
        ),
        migrations.AlterField(
            model_name='book',
            name='library',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='books', to='libraries.library', verbose_name='Kütüphane'),
        ),
        migrations.AlterField(
            model_name='book',
            name='pages',
            field=models.PositiveIntegerField(blank=True, null=True, verbose_name='Sayfa Sayısı'),
        ),
        migrations.AlterField(
            model_name='book',
            name='publication_year',
            field=models.PositiveIntegerField(blank=True, null=True, verbose_name='Yayın Yılı'),
        ),
        migrations.AlterField(
            model_name='book',
            name='publisher',
            field=models.CharField(blank=True, max_length=255, null=True, verbose_name='Yayınevi'),
        ),
        migrations.AlterField(
            model_name='book',
            name='status',
            field=models.CharField(choices=[('available', 'Mevcut'), ('borrowed', 'Ödünç Verilmiş'), ('reserved', 'Rezerve Edilmiş'), ('maintenance', 'Bakımda')], default='available', max_length=20, verbose_name='Durum'),
        ),
        migrations.AlterField(
            model_name='book',
            name='title',
            field=models.CharField(max_length=255, verbose_name='Başlık'),
        ),
        migrations.AlterField(
            model_name='book',
            name='updated_at',
            field=models.DateTimeField(auto_now=True, verbose_name='Güncellenme Tarihi'),
        ),
        migrations.AlterField(
            model_name='booknote',
            name='book',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='books.book', verbose_name='Kitap'),
        ),
        migrations.AlterField(
            model_name='booknote',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, verbose_name='Oluşturulma Tarihi'),
        ),
        migrations.AlterField(
            model_name='booknote',
            name='note',
            field=models.TextField(verbose_name='Not'),
        ),
        migrations.AlterField(
            model_name='booknote',
            name='updated_at',
            field=models.DateTimeField(auto_now=True, verbose_name='Güncellenme Tarihi'),
        ),
        migrations.AlterField(
            model_name='booknote',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='book_notes', to=settings.AUTH_USER_MODEL, verbose_name='Kullanıcı'),
        ),
        migrations.AlterField(
            model_name='booknote',
            name='visibility',
            field=models.CharField(choices=[('private', 'Özel'), ('public', 'Herkese Açık')], default='private', max_length=10, verbose_name='Görünürlük'),
        ),
        migrations.AlterField(
            model_name='bookrequest',
            name='book',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requests', to='books.book', verbose_name='Kitap'),
        ),
        migrations.AlterField(
            model_name='bookrequest',
            name='message',
            field=models.TextField(blank=True, null=True, verbose_name='Mesaj'),
        ),
        migrations.AlterField(
            model_name='bookrequest',
            name='requested_at',
            field=models.DateTimeField(auto_now_add=True, verbose_name='İstek Tarihi'),
        ),
        migrations.AlterField(
            model_name='bookrequest',
            name='requester',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='book_requests', to=settings.AUTH_USER_MODEL, verbose_name='İstekte Bulunan'),
        ),
        migrations.AlterField(
            model_name='bookrequest',
            name='response_message',
            field=models.TextField(blank=True, null=True, verbose_name='Yanıt Mesajı'),
        ),
        migrations.AlterField(
            model_name='bookrequest',
            name='status',
            field=models.CharField(choices=[('pending', 'Beklemede'), ('approved', 'Onaylandı'), ('rejected', 'Reddedildi'), ('cancelled', 'İptal Edildi')], default='pending', max_length=20, verbose_name='Durum'),
        ),
        migrations.AlterField(
            model_name='bookrequest',
            name='updated_at',
            field=models.DateTimeField(auto_now=True, verbose_name='Güncellenme Tarihi'),
        ),
        migrations.CreateModel(
            name='BookCollection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Koleksiyon Adı')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Açıklama')),
                ('visibility', models.CharField(choices=[('public', 'Herkese Açık'), ('private', 'Özel'), ('friends', 'Sadece Arkadaşlar')], default='private', max_length=20, verbose_name='Görünürlük')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Oluşturulma Tarihi')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Güncellenme Tarihi')),
                ('is_featured', models.BooleanField(default=False, verbose_name='Öne Çıkan')),
                ('cover_image', models.ImageField(blank=True, null=True, upload_to='collection_covers/', verbose_name='Kapak Resmi')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='book_collections', to=settings.AUTH_USER_MODEL, verbose_name='Oluşturan')),
            ],
            options={
                'verbose_name': 'Kitap Koleksiyonu',
                'verbose_name_plural': 'Kitap Koleksiyonları',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BookCollectionItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Eklenme Tarihi')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notlar')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Sıra')),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='books.book', verbose_name='Kitap')),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='books.bookcollection', verbose_name='Koleksiyon')),
            ],
            options={
                'verbose_name': 'Koleksiyon Kitabı',
                'verbose_name_plural': 'Koleksiyon Kitapları',
                'ordering': ['order', 'added_at'],
                'unique_together': {('collection', 'book')},
            },
        ),
        migrations.AddField(
            model_name='bookcollection',
            name='books',
            field=models.ManyToManyField(related_name='collections', through='books.BookCollectionItem', to='books.book', verbose_name='Kitaplar'),
        ),
        migrations.CreateModel(
            name='BookIdentifier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier_type', models.CharField(choices=[('barcode', 'Barkod'), ('qrcode', 'QR Kod'), ('rfid', 'RFID'), ('custom', 'Özel')], max_length=20, verbose_name='Tanımlayıcı Tipi')),
                ('value', models.CharField(max_length=255, unique=True, verbose_name='Değer')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Oluşturulma Tarihi')),
                ('is_active', models.BooleanField(default=True, verbose_name='Aktif')),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='identifiers', to='books.book', verbose_name='Kitap')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_identifiers', to=settings.AUTH_USER_MODEL, verbose_name='Oluşturan')),
            ],
            options={
                'verbose_name': 'Kitap Tanımlayıcı',
                'verbose_name_plural': 'Kitap Tanımlayıcıları',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BookReservation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reservation_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Rezervasyon Tarihi')),
                ('notification_date', models.DateTimeField(blank=True, null=True, verbose_name='Bildirim Tarihi')),
                ('expiry_date', models.DateTimeField(blank=True, null=True, verbose_name='Son Geçerlilik Tarihi')),
                ('status', models.CharField(choices=[('pending', 'Beklemede'), ('notified', 'Bildirim Gönderildi'), ('fulfilled', 'Tamamlandı'), ('expired', 'Süresi Doldu'), ('cancelled', 'İptal Edildi')], default='pending', max_length=20, verbose_name='Durum')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notlar')),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reservations', to='books.book', verbose_name='Kitap')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='book_reservations', to=settings.AUTH_USER_MODEL, verbose_name='Rezerve Eden')),
            ],
            options={
                'verbose_name': 'Kitap Rezervasyonu',
                'verbose_name_plural': 'Kitap Rezervasyonları',
                'ordering': ['reservation_date'],
            },
        ),
        migrations.CreateModel(
            name='BookReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveSmallIntegerField(help_text='1-5 arası değerlendirme puanı', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Değerlendirme')),
                ('review_text', models.TextField(blank=True, null=True, verbose_name='Yorum')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Oluşturulma Tarihi')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Güncellenme Tarihi')),
                ('is_public', models.BooleanField(default=True, verbose_name='Herkese Açık')),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='books.book', verbose_name='Kitap')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='book_reviews', to=settings.AUTH_USER_MODEL, verbose_name='Kullanıcı')),
            ],
            options={
                'verbose_name': 'Kitap Değerlendirmesi',
                'verbose_name_plural': 'Kitap Değerlendirmeleri',
                'ordering': ['-created_at'],
                'unique_together': {('book', 'user')},
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Kategori Adı')),
                ('slug', models.SlugField(max_length=100, unique=True, verbose_name='Slug')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Açıklama')),
                ('image', models.ImageField(blank=True, null=True, upload_to='category_images/', verbose_name='Kategori Resmi')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Oluşturulma Tarihi')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Güncellenme Tarihi')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='books.category', verbose_name='Üst Kategori')),
            ],
            options={
                'verbose_name': 'Kategori',
                'verbose_name_plural': 'Kategoriler',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ReadingChallenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Başlık')),
                ('description', models.TextField(verbose_name='Açıklama')),
                ('start_date', models.DateField(verbose_name='Başlangıç Tarihi')),
                ('end_date', models.DateField(verbose_name='Bitiş Tarihi')),
                ('goal_type', models.CharField(choices=[('books', 'Kitap Sayısı'), ('pages', 'Sayfa Sayısı'), ('minutes', 'Okuma Süresi (Dakika)')], max_length=20, verbose_name='Hedef Tipi')),
                ('target_value', models.PositiveIntegerField(verbose_name='Hedef Değeri')),
                ('status', models.CharField(choices=[('upcoming', 'Yaklaşan'), ('ongoing', 'Devam Ediyor'), ('completed', 'Tamamlandı'), ('cancelled', 'İptal Edildi')], default='upcoming', max_length=20, verbose_name='Durum')),
                ('is_featured', models.BooleanField(default=False, verbose_name='Öne Çıkan')),
                ('is_private', models.BooleanField(default=False, verbose_name='Özel')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Oluşturulma Tarihi')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_challenges', to=settings.AUTH_USER_MODEL, verbose_name='Oluşturan')),
                ('required_books', models.ManyToManyField(blank=True, related_name='required_for_challenges', to='books.book', verbose_name='Gerekli Kitaplar')),
            ],
            options={
                'verbose_name': 'Okuma Meydan Okuması',
                'verbose_name_plural': 'Okuma Meydan Okumaları',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReadingGoal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Hedef Başlığı')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Açıklama')),
                ('goal_type', models.CharField(choices=[('books', 'Kitap Sayısı'), ('pages', 'Sayfa Sayısı'), ('minutes', 'Okuma Süresi (Dakika)')], max_length=20, verbose_name='Hedef Tipi')),
                ('target_value', models.PositiveIntegerField(verbose_name='Hedef Değeri')),
                ('current_value', models.PositiveIntegerField(default=0, verbose_name='Mevcut Değer')),
                ('period', models.CharField(choices=[('daily', 'Günlük'), ('weekly', 'Haftalık'), ('monthly', 'Aylık'), ('yearly', 'Yıllık'), ('custom', 'Özel')], max_length=20, verbose_name='Periyod')),
                ('start_date', models.DateField(default=django.utils.timezone.now, verbose_name='Başlangıç Tarihi')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='Bitiş Tarihi')),
                ('is_completed', models.BooleanField(default=False, verbose_name='Tamamlandı mı?')),
                ('is_public', models.BooleanField(default=False, verbose_name='Herkese Açık')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Oluşturulma Tarihi')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Güncellenme Tarihi')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reading_goals', to=settings.AUTH_USER_MODEL, verbose_name='Kullanıcı')),
            ],
            options={
                'verbose_name': 'Okuma Hedefi',
                'verbose_name_plural': 'Okuma Hedefleri',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ScanRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scan_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Tarama Tarihi')),
                ('location', models.CharField(blank=True, max_length=255, null=True, verbose_name='Konum')),
                ('scan_type', models.CharField(blank=True, max_length=50, null=True, verbose_name='Tarama Tipi')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notlar')),
                ('identifier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scan_records', to='books.bookidentifier', verbose_name='Tanımlayıcı')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scan_records', to=settings.AUTH_USER_MODEL, verbose_name='Kullanıcı')),
            ],
            options={
                'verbose_name': 'Tarama Kaydı',
                'verbose_name_plural': 'Tarama Kayıtları',
                'ordering': ['-scan_date'],
            },
        ),
        migrations.CreateModel(
            name='BookReviewLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Beğenme Tarihi')),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='books.bookreview', verbose_name='Değerlendirme')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review_likes', to=settings.AUTH_USER_MODEL, verbose_name='Kullanıcı')),
            ],
            options={
                'verbose_name': 'Değerlendirme Beğenisi',
                'verbose_name_plural': 'Değerlendirme Beğenileri',
                'ordering': ['-created_at'],
                'unique_together': {('review', 'user')},
            },
        ),
        migrations.CreateModel(
            name='BookCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Eklenme Tarihi')),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='categories', to='books.book', verbose_name='Kitap')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='books', to='books.category', verbose_name='Kategori')),
            ],
            options={
                'verbose_name': 'Kitap Kategorisi',
                'verbose_name_plural': 'Kitap Kategorileri',
                'ordering': ['category__name'],
                'unique_together': {('book', 'category')},
            },
        ),
        migrations.CreateModel(
            name='ChallengeParticipant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_value', models.PositiveIntegerField(default=0, verbose_name='Mevcut Değer')),
                ('is_completed', models.BooleanField(default=False, verbose_name='Tamamlandı mı?')),
                ('joined_at', models.DateTimeField(auto_now_add=True, verbose_name='Katılım Tarihi')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Tamamlanma Tarihi')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challenge_participations', to=settings.AUTH_USER_MODEL, verbose_name='Kullanıcı')),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='books.readingchallenge', verbose_name='Meydan Okuma')),
            ],
            options={
                'verbose_name': 'Meydan Okuma Katılımcısı',
                'verbose_name_plural': 'Meydan Okuma Katılımcıları',
                'ordering': ['-joined_at'],
                'unique_together': {('challenge', 'user')},
            },
        ),
        migrations.CreateModel(
            name='BookTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Eklenme Tarihi')),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tags', to='books.book', verbose_name='Kitap')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='books', to='books.tag', verbose_name='Etiket')),
            ],
            options={
                'verbose_name': 'Kitap Etiketi',
                'verbose_name_plural': 'Kitap Etiketleri',
                'ordering': ['tag__name'],
                'unique_together': {('book', 'tag')},
            },
        ),
    ]
